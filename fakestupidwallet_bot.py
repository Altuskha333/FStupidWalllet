from aiogram import Bot, Dispatcher, executor, types
import BaseAPI
import stupidwalletapi
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
import logging
import random
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Replace with your bot token
TOKEN = ""

# Replace with your user ID
ADMIN_ID = 'your id in telegram'

# Dictionary to store user balances
balances = {}

# Dictionary to store user checks
checks = {}

# Dictionary to map check codes to check IDs
check_codes = {}

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

class Transaction(StatesGroup):
    User = State()
    Amount = State()

def generate_check_code(amount, activations):
    code = f"{amount}{activations}{random.randint(1000, 9999)}"
    return code

def load_balances():
    try:
        with open('noadebili.txt', 'r') as f:
            for line in f:
                user_id, balance = line.strip().split(': ')
                balances[int(user_id)] = int(balance)
    except FileNotFoundError:
        pass

def save_balances():
    with open('noadebili.txt', 'w') as f:
        for user_id, balance in balances.items():
            f.write(f"{user_id}: {balance}\n")

@dp.message_handler(commands=['start'])
async def start(message: types.Message, arg=None):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëõ –ö–æ—à–µ–ª—ë–∫", callback_data='wallet'))
    keyboard.add(InlineKeyboardButton("API ü§ñ", callback_data='api'))
    await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ NoAStupidWallet!\n\n–ó–Ω–∞–π—Ç–µ, —á—Ç–æ –≤—Å–µ –º–æ–Ω–µ—Ç—ã - –≤—ã–º—ã—Å–µ–ª. –û–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç —Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–æ–º—É @noaaltuskha\'–µ –∏ @fwavacat, –∞ –Ω–µ –≤–∞–º.', reply_markup=keyboard)

    if message.get_args():
        try:
            check_code = message.get_args().split()[0]
            if check_code in check_codes:
                check_id = check_codes[check_code]
                user_id = message.from_user.id
                if 'users' not in checks[check_id]:
                    checks[check_id]['users'] = []
                if user_id in checks[check_id]['users']:
                    await message.answer("üí¨–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π —á–µ–∫!")
                else:
                    if checks[check_id]['activations'] > 0:
                        amount = checks[check_id]['amount']
                        if user_id not in balances:
                            balances[user_id] = 0
                        balances[user_id] += amount
                        save_balances()
                        checks[check_id]['activations'] -= 1
                        checks[check_id]['users'].append(user_id)
                        await message.answer(f"–í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —á–µ–∫ –Ω–∞ {amount} FWAV!")
                    else:
                        await message.answer("–ß–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            else:
                await message.answer("–ß–µ–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except ValueError:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–µ–∫–∞.")

@dp.callback_query_handler(lambda c: c.data)
async def button(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    if callback_query.data == 'wallet':
        load_balances()
        if user_id not in balances:
            balances[user_id] = 0
            save_balances()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚Üó–°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data='create_check'))
        keyboard.add(InlineKeyboardButton("‚èèÔ∏è –ú–æ–∏ —á–µ–∫–∏", callback_data='my_checks'))
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=f"üëõ –í–∞—à –∫–æ—à–µ–ª—ë–∫:\n\nFWAV: {balances[user_id]}",
                                    reply_markup=keyboard)
    elif callback_query.data == 'create_check':
        load_balances()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("FWAV", callback_data='fwav'))
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞:",
                                    reply_markup=keyboard)
    elif callback_query.data == 'fwav':
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ FWAV (–£ –≤–∞—Å: {balances[user_id]} FWAV):")
    elif callback_query.data == 'my_checks':
        if user_id in checks:
            text = "–í–∞—à–∏ —á–µ–∫–∏:\n\n" + "\n".join(checks[user_id])
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç —á–µ–∫–æ–≤."
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back'))
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text=text,
                                    reply_markup=keyboard)
    elif callback_query.data == 'back':
        await start(callback_query.message, None)


@dp.callback_query_handler(lambda c: c.data == 'checks')
async def checks_menu(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å —á–µ–∫", callback_data='create_check'))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back'))

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–ß–µ–∫–∏:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'create_check')
async def create_check_menu(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("FWAV", callback_data='fwav'))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back'))

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'fwav')
async def fwav(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    balance = balances.get(user_id, 0)
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ FWAV –¥–ª—è —á–µ–∫–∞ (—É –≤–∞—Å {balance} FWAV!):")

@dp.message_handler(commands=['cFWAV'])
async def create_check(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        try:
            amount = int(message.get_args().split()[0])
            activations = int(message.get_args().split()[1])
            check_id = random.randint(100000, 999999)
            while check_id in checks:
                check_id = random.randint(100000, 999999)
            check_code = generate_check_code(amount, activations)
            if check_code:
                check_url = f"https://t.me/FakeStupidWallet_bot?start={check_code}"
                checks[check_id] = {'amount': amount, 'activations': activations}
                check_codes[check_code] = check_id
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫üí∏", url=f"https://t.me/FakeStupidWallet_bot?start={check_code}"))
                await message.answer(f"üí¨ –ß–µ–∫ –Ω–∞ {amount} FWAV", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        except (IndexError, ValueError):
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cFWAV [—á–∏—Å–ª–æ –º–æ–Ω–µ—Ç] [—á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π]")



print ("created by @altuskha")

@dp.message_handler()
async def create_check(message: types.Message):
    try:
        amount = int(message.text)
        if amount > 0:
            user_id = message.from_user.id
            if user_id in balances and balances[user_id] >= amount:
                check_id = len(checks) + 1
                check_code = generate_check_code(amount, 1)
                checks[check_id] = {'amount': amount, 'activations': 1}
                check_codes[check_code] = check_id
                balances[user_id] -= amount
                save_balances()
                keyboard = InlineKeyboardMarkup()
                keyboard.add(InlineKeyboardButton(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ –Ω–∞ {amount} FWAV! üí∏", url=f"https://t.me/FakeStupidWallet_Bot?start={check_code}"))
                await message.answer(f"üí¨ –ß–µ–∫ –Ω–∞ {amount} FWAV!", reply_markup=keyboard)
            else:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        else:
            await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
    except ValueError:
        pass

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
